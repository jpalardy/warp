#!/bin/bash

warp() {
  # ensure SOURCE file exists
  local SOURCE="$HOME/.warp"
  if [ ! -f "$SOURCE" ]; then
    echo "$SOURCE does not exist..."
    return 1
  fi

  # cleanup TARGET file
  local TARGET=$HOME/.picked
  if [ -e "$TARGET" ]; then
    rm "$TARGET"
  fi

  # make a selection, with vim
  cat "$SOURCE" | vim -c "setlocal noreadonly" \
                      -c "setlocal cursorline" \
                      -c "setlocal number" \
                      -c "nnoremap <buffer> <CR> V:w! ~/.picked<CR>:qa!<CR>" \
                      -c "vnoremap <buffer> <CR>  :w! ~/.picked<CR>:qa!<CR>" \
                      -R -
  # nothing was selected, abort
  if [ ! -e "$TARGET" ]; then
    return
  fi

  # transform seletion in ssh command
  local SSH=${SSH:-ssh}
  if [ $(cat "$TARGET" | wc -l) -gt 1 ]; then
    # determine which clusterssh to use based on os
    unamestr=`uname`
    if [[ "$unamestr" == 'Linux' ]]; then
      SSH=${MULTISSH:-cssh}
    elif [[ "$unamestr" == 'Darwin' ]]; then
      SSH=${MULTISSH:-csshX}
    fi
  fi
  _uname=$(uname -s)
  if [ "${_uname:0:6}" == "Darwin" ]; then
    sed -i "" "s/#.*$//g" ~/.picked
    sed -i "" "s/\-\-.*$//g" ~/.picked
  elif [ "${_uname:0:5}" == "Linux" ]; then
    sed -i "s/#.*$//g" ~/.picked
    sed -i "s/\-\-.*$//g" ~/.picked
  fi
  local COMMAND="$(awk -v cmd=$SSH 'BEGIN {printf cmd} {printf " " $0} END { print "" }' "$TARGET")"

  # add the command to the bash history as if we had typed it, will only work if sourced
  # Determine which history command to use based on shell
  if [ -n "$BASH_VERSION" ]; then
    eval "history -s $COMMAND"
  elif [ -n "$ZSH_VERSION" ]; then
    eval "print -s $COMMAND"
  fi

  # run the command
  eval $COMMAND
}

# allow warp to be sourced without running
if [[ $_ == $0 ]]; then
  warp
else
  # Hide warp from history if using zsh and setopt histignorespace
  alias warp=" warp"
fi
